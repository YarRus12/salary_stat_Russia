import subprocess
import requests
import pandas as pd
import os
import streamlit as st
import streamlit as st
import numpy as np
import pandas as pd
import altair as alt

choosen_activity = ['–¥–æ–±—ã—á–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö', '–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ']


def pygraph(df):
    import pandas as pd
    import matplotlib.pyplot as plt

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig, ax1 = plt.subplots()
    ax2 = ax1.twinx()

    # –ë–∞—Ä–µ–ª—å–µ—Ñ —Å –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–æ–π
    df.plot(x='–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', y='–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞', kind='bar', ax=ax1, color='blue')

    # –õ–∏–Ω–∏—è —Å –∏–Ω—Ñ–ª—è—Ü–∏–µ–π
    df.plot(x='–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', y='inflation_rate_previous_year', kind='line', marker='o', ax=ax2,
                     color='red')

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    ax1.set_ylabel('–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞', color='blue')
    ax2.set_ylabel('–ò–Ω—Ñ–ª—è—Ü–∏—è', color='red')
    plt.title('–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –∏ –∏–Ω—Ñ–ª—è—Ü–∏—è –ø–æ –≤–∏–¥—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
    plt.xticks(rotation=45)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Streamlit
    st.pyplot(fig)


@st.cache_data
def economy_actvity_data():
    df_2016 = pd.read_excel("tab3-zpl_2023.xlsx", sheet_name='2000-2016 –≥–≥.', index_col=None)[
              2:]  # –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –Ω–µ—Å—É—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –Ω–∞—Å
    column_list = ['–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', '2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009',
                   '2010', '2011', '2012', '2013', '2014', '2015', '2016']
    rename_dict = {df_2016.columns[column_index]: column_list[column_index] for column_index in
                   range(len(df_2016.columns))}
    df_2016.rename(columns=rename_dict, inplace=True)
    # –ö–æ–ª–æ–Ω–∫–∞ –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—á–∏—â–∞–µ—Ç—Å—è –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–æ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    df_2016['–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'] = df_2016['–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'].str.lower().str.strip()
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ —Å –Ω–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º–∏
    df_2017 = pd.read_excel("tab3-zpl_2023.xlsx", sheet_name='—Å 2017 –≥.')[4:]
    rename_dict = {'Unnamed: 0': '–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'}

    # –î–æ–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–ª–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≥–æ–¥–∞ –Ω–∞ –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏
    [rename_dict.update({df_2017.columns[x]: f"{2016 + x}"}) for x in range(1, len(df_2017.columns))]
    df_2017.rename(columns=rename_dict, inplace=True)
    # –ö–æ–ª–æ–Ω–∫–∞ "–≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" –æ—á–∏—â–∞–µ—Ç—Å—è –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–æ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    df_2017['–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'] = df_2017['–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'].str.lower().str.strip()
    return (pd.merge(df_2016[df_2016['–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'].str.lower().str.strip().isin(choosen_activity)],
                     df_2017[df_2017['–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'].str.lower().str.strip().isin(choosen_activity)],
                     on='–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
            .melt(id_vars='–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', var_name='year', value_name='–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞')
            )

@st.cache_data
def infliation_data():
    url = 'https://xn----ctbjnaatncev9av3a8f8b.xn--p1ai/%D1%82%D0%B0%D0%B1%D0%BB%D0%B8%D1%86%D1%8B-%D0%B8%D0%BD%D1%84%D0%BB%D1%8F%D1%86%D0%B8%D0%B8'
    r = requests.get(url)
    if r.status_code == 200:
        html_content = r.text
    else:
        print('No connection')
        raise
    inflation_start_line = html_content[html_content.find('yoyInflationList') + len('yoyInflationList":'):]
    inflation_line = inflation_start_line[:inflation_start_line.find(']') + 1].replace('new Date(', '').replace(')', '')
    inflation_list = (eval(inflation_line))
    year_inf = [{'year': record['month'][:4], 'inflation_rate': record['rate']} for record in inflation_list if
                record['month'][5:7] == '12']
    inflation = pd.DataFrame(year_inf, columns=['year', 'inflation_rate'])
    inflation['inflation_rate_previous_year'] = inflation['inflation_rate'].shift(1)
    return inflation

@st.cache_data
def main():
    # —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
    [os.remove(x) for x in os.listdir() if x.endswith('.xlsx')]
    # —Å–∫–∞—á–∏–≤–∞–µ–º xlsx —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
    stat_url = 'https://rosstat.gov.ru/storage/mediabank/tab3-zpl_2023.xlsx'
    wget_command = ['wget', '--limit-rate=100k', stat_url]
    subprocess.run(wget_command)
    # –≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
    economy_df = economy_actvity_data()
    inflation_df = infliation_data()
    result = economy_df.merge(inflation_df, on='year')
    return result[['year', '–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', '–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞', 'inflation_rate_previous_year']]

@st.cache_data(ttl=60 * 60 * 24)
def get_chart(data):
    hover = alt.selection_single(
        fields=["date"],
        nearest=True,
        on="mouseover",
        empty="none",
    )

    lines = (
        alt.Chart(data, height=500, title="–°—Ä–µ–¥–Ω—è—è –Ω–æ–º–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –≤ –†–æ—Å—Å–∏–∏")
        .mark_line()
        .encode(
            x=alt.X("date", title="Date"),
            y=alt.Y("price", title="Price"),
            color="symbol",
        )
    )
    # Draw points on the line, and highlight based on selection
    points = lines.transform_filter(hover).mark_circle(size=65)

    # Draw a rule at the location of the selection
    tooltips = (
        alt.Chart(data)
        .mark_rule()
        .encode(
            x="year",
            y="–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞",
            opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),
            tooltip=[
                alt.Tooltip("year", title="year"),
                alt.Tooltip("–ó–ü", title="–ó–ü (–†–£–ë)"),
            ],
        )
        .add_selection(hover)
    )

    return (lines + points + tooltips).interactive()


if __name__ == '__main__':
    st.set_page_config(layout="centered", page_icon="üí¨", page_title="–ê–Ω–∞–ª–∏–∑ –Ω–æ–º–∏–Ω–∞–ª—å–Ω—ã—Ö –∑–∞—Ä–∞–±–æ—Ç–Ω—ã—Ö –ø–ª–∞—Ç –≤ –†–æ—Å—Å–∏–∏")
    st.title('–ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç –≤ –†–æ—Å—Å–∏–∏')

    # Load data
    res = main()
    res.year = res.year.astype('int')
    min_value = res['year'].min()
    max_value = res['year'].max()
    activity = res['–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'].unique()

    # static table
    #st.table(res)

    selected_activity = st.multiselect(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∏–¥ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
        activity, choosen_activity)

    from_year, to_year = st.slider(
        'Which years are you interested in?',
        min_value=min_value,
        max_value=max_value,
        value=[min_value, max_value])

    filtered_df = res[
        (res['–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'].isin(selected_activity))
        & (res['year'] <= to_year)
        & (from_year <= res['year'])
        ]
    #st.table(filtered_df)

    st.write("")
    st.write("")
    st.write("")

    pygraph(filtered_df)


    #st.line_chart(new_df.set_index('year'), use_container_width=True).write('–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ –ø–æ –≥–æ–¥–∞–º')

    # Create a chart with annotations
    #annotations_df = pd.DataFrame(ANNOTATIONS, columns=["date", "event"])
    #annotations_df.date = pd.to_datetime(annotations_df.date)
    #annotations_df["y"] = 0
    #annotation_layer = (
    #     alt.Chart(annotations_df)
    #     .mark_text(size=15, text=ticker, dx=ticker_dx, dy=ticker_dy, align="center")
    #     .encode(
    #         x="date:T",
    #         y=alt.Y("y:Q"),
    #         tooltip=["event"],
    #     )
    #     .interactive()
    # )
    #
    # # Display both charts together
    # st.altair_chart((chart + annotation_layer).interactive(), use_container_width=True)
