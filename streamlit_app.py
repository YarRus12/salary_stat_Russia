import streamlit as st
import altair as alt
from prepare_data import main, extra_metrics, previous_year_inflation, real_salary, real_salary_delta
import numpy as np

CHOSEN_ACTIVITY = ['–¥–æ–±—ã—á–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö', '–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
                   '–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ—Å—Ç–∏–Ω–∏—Ü –∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                   '–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥']
EXTRA_METRICS = ['–í–í–ü', '–í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è']


@st.cache_data(ttl=60 * 60 * 24)
def create_schedule_main(dataframe) -> None:
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ —Å –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –∏ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∏ –ª–∏–Ω–∏–∏ —Ä–æ—Å—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–π –ó–ü –∏ –∏–Ω—Ñ–ª—è—Ü–∏–∏

    :param dataframe: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π dataframe —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    :return:
    """
    bar_chart = alt.Chart(dataframe).mark_bar().encode(
        x=alt.X('year:O', axis=alt.Axis(format='')),
        y=real_salary,
        color='–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
    ).properties(
        width=1000,
        height=400
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–Ω–∏–∏ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≥–æ–¥–∞
    inflation_chart = alt.Chart(dataframe).mark_line(color='red').encode(
        y=alt.Y(previous_year_inflation, axis=alt.Axis(titleColor='white', labelColor='red')),
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ –æ—Å–∏ Y
        x=alt.X('year:O', axis=alt.Axis(format='')),
        size=alt.value(5)  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ –æ—Å–∏ X
    ).properties(
        width=1000,
        height=400,
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã (%) –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
    line_delta_salary = alt.Chart(dataframe).mark_line(color='green').encode(
        y=alt.Y(real_salary_delta, axis=alt.Axis(titleColor='white', labelColor='green')),
        x=alt.Y('year:O', axis=alt.Axis(titleColor='white')),
        size=alt.value(5)
    ).properties(
        width=1000,
        height=400
    )

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ª–∏–Ω–∏—é –∏–Ω—Ñ–ª—è—Ü–∏–∏ –∏ –ª–∏–Ω–∏—é % –∏–∑–º–µ–Ω–Ω–∏–π –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã
    inflation_delta_salary_line = alt.layer(inflation_chart, line_delta_salary)

    # –°–æ–µ–¥–∏–Ω—è–µ–º –ª–∏–Ω–∏–∏ —Å –±–∞—Ä–µ–ª—è–º–∏ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ - —Ç–∞–∫ –Ω–∞–≥–ª—è–¥–Ω–µ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è
    combined_chart = alt.layer(bar_chart, inflation_delta_salary_line).resolve_scale(y='independent')
    st.altair_chart(combined_chart, use_container_width=True)


def create_schedule_vvp(df_general, df_vvp, extra_column):
    merged = df_general.merge(df_vvp, on='year')

    bar_chart = alt.Chart(merged).mark_bar().encode(
        x=alt.X('year:O', axis=alt.Axis(title='–ì–æ–¥', labelAngle=0, tickMinStep=1)),  # –û—Å—å x - –≥–æ–¥—ã
        y=alt.Y(f'{extra_column}:Q', axis=alt.Axis(title=extra_column, tickMinStep=5))  # –û—Å—å y - –í–í–ü –≤ —Ç—Ä–ª–Ω —Ä—É–±.
    ).properties(
        width=1000,  # –®–∏—Ä–∏–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        height=400  # –í—ã—Å–æ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–Ω–∏–∏ % –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
    line_delta_salary = alt.Chart(df_general).mark_line(color='green').encode(
        y=alt.Y(real_salary_delta, axis=alt.Axis(titleColor='white', labelColor='green')),
        x=alt.Y('year:O', axis=alt.Axis(titleColor='white')),
        size=alt.value(5)
    ).properties(
        width=1000,
        height=400
    )
    combined_chart = alt.layer(bar_chart, line_delta_salary)
    st.altair_chart(combined_chart, use_container_width=True)


def corr_coefficient_extra(df_general, df_vvp, extra_column, general_column='–∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã'):
    filled_length = len(df_general.merge(df_vvp, on='year')) - 2
    delta_salary_list = df_general[real_salary_delta].tolist()[
                        -filled_length:]  # –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤—Å–µ–≥–¥–∞ nan - –µ–≥–æ –º—ã —É–¥–∞–ª—è–µ–º
    extra_column_list = df_vvp[extra_column].tolist()[
                        -filled_length:]  # –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ delta –∑–ø

    st.info(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞ –º–µ–∂–¥—É {extra_column} –∏ {general_column} "
            f"–≤ —Å—Ñ–µ—Ä–µ - {activity.capitalize()}: "
            f"{str(np.corrcoef(extra_column_list, delta_salary_list)[0, 1])}")


def corr_coefficient_main(dataframe):
    delta_salary_list = dataframe[real_salary_delta].tolist()[1:]  # –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤—Å–µ–≥–¥–∞ nan - –µ–≥–æ –º—ã —É–¥–∞–ª—è–µ–º
    inflation_last_year_list = dataframe[previous_year_inflation].tolist()[
                               :len(delta_salary_list)]  # –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ delta –∑–ø
    st.write("")

    st.info(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞ –º–µ–∂–¥—É –∏–Ω—Ñ–ª—è—Ü–∏–µ–π –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã "
            f"–≤ —Å—Ñ–µ—Ä–µ - {activity.capitalize()}: "
            f"{str(np.corrcoef(inflation_last_year_list, delta_salary_list)[0, 1])}")


if __name__ == '__main__':
    st.set_page_config(layout="centered", page_icon="üí¨", page_title="–ê–Ω–∞–ª–∏–∑ –Ω–æ–º–∏–Ω–∞–ª—å–Ω—ã—Ö –∑–∞—Ä–∞–±–æ—Ç–Ω—ã—Ö –ø–ª–∞—Ç –≤ –†–æ—Å—Å–∏–∏")

    st.title('–ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç –≤ –†–æ—Å—Å–∏–∏')

    # Load data
    res = main(chosen_activity=CHOSEN_ACTIVITY)
    res.year = res.year.astype('int')
    min_value = res['year'].min()
    max_value = res['year'].max()
    activity = res['–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'].unique()

    st.write("")

    selected_activity = st.multiselect(
        '–ö–∞–∫–∏–µ –≤–∏–¥—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?',
        options=activity, default=CHOSEN_ACTIVITY
    )
    st.write("")
    from_year, to_year = st.slider(
        '–ö–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
        min_value=min_value,
        max_value=max_value,
        value=[min_value, max_value])
    st.write("")

    selected_extra = st.multiselect(
        '–ü–æ—Å–º–æ—Ç—Ä–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π?',
        EXTRA_METRICS, EXTRA_METRICS)

    filtered_df = res[
        (res['–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'].isin(selected_activity))
        & (res['year'] <= to_year)
        & (from_year <= res['year'])
        ]

    st.write("")
    st.write("")

    for activity in selected_activity:

        st.title(activity.capitalize())
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã
        df = filtered_df[filtered_df['–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'] == activity]

        # –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã
        corr_coefficient_main(dataframe=df)
        st.write("")

        create_schedule_main(dataframe=df)
        st.write("")
        st.write("")

        df_dict = extra_metrics(selected_extra)
        if '–í–í–ü' in selected_extra:
            vvp_dt = df_dict['–í–í–ü']
            corr_coefficient_extra(df_general=df, df_vvp=vvp_dt['dataframe'], extra_column=vvp_dt['column'])
            create_schedule_vvp(df_general=df, df_vvp=vvp_dt['dataframe'], extra_column=vvp_dt['column'])

        if '–í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è' in selected_extra:
            vvp_dt_per = df_dict['–í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è']
            corr_coefficient_extra(df_general=df, df_vvp=vvp_dt_per['dataframe'], extra_column=vvp_dt_per['column'])
            create_schedule_vvp(df_general=df, df_vvp=vvp_dt_per['dataframe'], extra_column=vvp_dt_per['column'])

    st.write("")
    st.write("")
    st.write("")
    st.write("")
    st.write("")
    st.write("")

    st.sidebar.title("–≠—Ç–æ—Ç sidebar –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ :thought_balloon:")

    st.sidebar.markdown(
        """
        ![Altair Logo](https://i.pinimg.com/originals/3e/69/33/3e6933f1430c178465f64df11671c0e9.jpg)
        """
    )
    st.sidebar.info(

        """
         –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: 
         - –í—Å–µ –≤–∏–¥—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ—é—Ç –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ä–æ—Å—Ç–æ–º –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã –∏ —É—Ä–æ–≤–Ω–µ–º –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤ –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É
         - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –í–í–ü –∏ –í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Ä–∞—Å–ª–∏ –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã
         - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –í–í–ü –∏ –í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Ä–∞—Å–ª–∏ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–º–µ–µ—Ç –Ω–∏–∑–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã
         - –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ —Å–ª–µ–¥—É–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞–∫ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ (2008-2008), —Ç–∞–∫ –∏ –Ω–µ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ (2017)
         
         –ü–´–°–´: –í—Ä–æ–¥–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–µ–ø–ª–æ—Ö–æ, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –±–æ–ª—å—à–µ, —á–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è
         
        """
    )
