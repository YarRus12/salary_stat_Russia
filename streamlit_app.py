import streamlit as st
import altair as alt
from prepare_data import main
import numpy as np

CHOSEN_ACTIVITY = ['–¥–æ–±—ã—á–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö', '–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
                   '–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ—Å—Ç–∏–Ω–∏—Ü –∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                   '–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥']


@st.cache_data(ttl=60 * 60 * 24)
def create_schedule(dataframe):

    bar_chart = alt.Chart(dataframe).mark_bar().encode(
        x=alt.X('year:O', axis=alt.Axis(format='')),
        y='–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞',
        color='–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
    ).properties(
        width=1000,
        height=400
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–Ω–∏–∏ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤ –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É
    inflation_chart = alt.Chart(dataframe).mark_line(color='red').encode(
        y=alt.Y('–ò–Ω—Ñ–ª—è—Ü–∏—è –≤ –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É', axis=alt.Axis(titleColor='white', labelColor='red')),
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ –æ—Å–∏ Y
        x=alt.X('year:O', axis=alt.Axis(format='')),
        size=alt.value(5)  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ –æ—Å–∏ X
    ).properties(
        width=1000,
        height=400,
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–Ω–∏–∏ % –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
    line_delta_salary = alt.Chart(dataframe).mark_line(color='green').encode(
        y=alt.Y('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã', axis=alt.Axis(titleColor='white', labelColor='green')),
        x=alt.Y('year:O', axis=alt.Axis(titleColor='white')),
        size=alt.value(5)
    ).properties(
        width=1000,
        height=400
    )

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ª–∏–Ω–∏—é –∏–Ω—Ñ–ª—è—Ü–∏–∏ –∏ –ª–∏–Ω–∏—é % –∏–∑–º–µ–Ω–Ω–∏–π –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã
    inflation_delta_salary_line = alt.layer(inflation_chart, line_delta_salary)

    # –°–æ–µ–¥–∏–Ω—è–µ–º –ª–∏–Ω–∏–∏ —Å –±–∞—Ä–µ–ª—è–º–∏ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã
    combined_chart = alt.layer(bar_chart, inflation_delta_salary_line).resolve_scale(y='independent')
    st.altair_chart(combined_chart, use_container_width=True)


def corr_coefficient(dataframe):
    delta_salary_list = dataframe['–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã'].tolist()[1:]  # –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤—Å–µ–≥–¥–∞ nan - –µ–≥–æ –º—ã —É–¥–∞–ª—è–µ–º
    inflation_last_year_list = dataframe['–ò–Ω—Ñ–ª—è—Ü–∏—è –≤ –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É'].tolist()[
                               :len(delta_salary_list)]  # –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ delta –∑–ø
    st.write("")

    st.info(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞ –º–µ–∂–¥—É –∏–Ω—Ñ–ª—è—Ü–∏–µ–π –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã "
            f"–≤ —Å—Ñ–µ—Ä–µ - {activity.capitalize()}: "
            f"{str(np.corrcoef(inflation_last_year_list, delta_salary_list)[0, 1])}")
    # inflation_curr_year_list = dataframe['inflation_rate'].tolist()[:len(delta_salary_list)]  # –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ delta –∑–ø
    # st.info(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞ –º–µ–∂–¥—É –∏–Ω—Ñ–ª—è—Ü–∏–µ–π —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã: "
    #         f"{str(np.corrcoef(inflation_curr_year_list, delta_salary_list)[0, 1])}")


if __name__ == '__main__':
    st.set_page_config(layout="centered", page_icon="üí¨", page_title="–ê–Ω–∞–ª–∏–∑ –Ω–æ–º–∏–Ω–∞–ª—å–Ω—ã—Ö –∑–∞—Ä–∞–±–æ—Ç–Ω—ã—Ö –ø–ª–∞—Ç –≤ –†–æ—Å—Å–∏–∏")

    st.title('–ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç –≤ –†–æ—Å—Å–∏–∏')

    # Load data
    res = main(choosen_activity=CHOSEN_ACTIVITY)
    res.year = res.year.astype('int')
    min_value = res['year'].min()
    max_value = res['year'].max()
    activity = res['–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'].unique()

    st.write("")

    selected_activity = st.multiselect(
        '–ö–∞–∫–∏–µ –≤–∏–¥—ã —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?',
        activity, CHOSEN_ACTIVITY)
    st.write("")
    from_year, to_year = st.slider(
        '–ö–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
        min_value=min_value,
        max_value=max_value,
        value=[min_value, max_value])
    st.write("")
    filtered_df = res[
        (res['–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'].isin(selected_activity))
        & (res['year'] <= to_year)
        & (from_year <= res['year'])
        ]

    st.write("")
    st.write("")

    for activity in selected_activity:
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã
        df = filtered_df[filtered_df['–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'] == activity]
        corr_coefficient(dataframe=df)
        st.write("")
        create_schedule(dataframe=df)
        # –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä—ã

        st.write("")
        st.write("")
        st.write("")

    st.sidebar.title("About")
    st.sidebar.info(
        """
        This app is Open Source dashboard.
        """
    )
